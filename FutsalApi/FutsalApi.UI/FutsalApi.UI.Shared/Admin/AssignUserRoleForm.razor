@page "/admin/assign-user-role"
@using FutsalApi.Data.DTO
@using FutsalApi.Data.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Assign User Role</PageTitle>

<h1>Assign User Role</h1>

@if (users == null || roles == null)
{
    <p><em>Loading users and roles...</em></p>
}
else
{
    <EditForm Model="@userRole" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="user">User</label>
            <InputSelect id="user" @bind-Value="userRole.UserId" class="form-control">
                <option value="">Select User</option>
                @foreach (var user in users)
                {
                    <option value="@user.Id">@user.Email</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label for="role">Role</label>
            <InputSelect id="role" @bind-Value="userRole.RoleId" class="form-control">
                <option value="">Select Role</option>
                @foreach (var role in roles)
                {
                    <option value="@role.Id">@role.Name</option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">Assign Role</button>
    </EditForm>
}

@code {
    private UserRole userRole = new();
    private List<InfoResponse>? users;
    private List<Role>? roles;

    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<List<InfoResponse>>("User/info");
        roles = await Http.GetFromJsonAsync<List<Role>>("Roles");
    }

    private async Task HandleValidSubmit()
    {
        var result = await Http.PostAsJsonAsync("UserRoles", userRole);
        if (result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/admin/user-roles");
        }
        // Handle error cases
    }
}
