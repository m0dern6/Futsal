
@using FutsalApi.Data.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<EditForm Model="@futsalGround" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="futsalGround.Name" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="location">Location</label>
        <InputText id="location" @bind-Value="futsalGround.Location" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="price">Price Per Hour</label>
        <InputNumber id="price" @bind-Value="futsalGround.PricePerHour" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="description">Description</label>
        <InputTextArea id="description" @bind-Value="futsalGround.Description" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="open-time">Opening Time</label>
        <InputDate Type="InputDateType.Time" id="open-time" @bind-Value="futsalGround.OpenTime" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="close-time">Closing Time</label>
        <InputDate Type="InputDateType.Time" id="close-time" @bind-Value="futsalGround.CloseTime" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    private FutsalGroundRequest futsalGround = new();

    protected override async Task OnParametersSetAsync()
    {
        if (Id.HasValue)
        {
            var result = await Http.GetFromJsonAsync<FutsalGroundResponse>($"FutsalGround/{Id.Value}");
            if (result != null)
            {
                futsalGround = new FutsalGroundRequest
                {
                    Name = result.Name,
                    Location = result.Location,
                    PricePerHour = result.PricePerHour,
                    Description = result.Description,
                    OpenTime = result.OpenTime,
                    CloseTime = result.CloseTime
                };
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        if (Id.HasValue)
        {
            await Http.PutAsJsonAsync($"FutsalGround/{Id.Value}", futsalGround);
        }
        else
        {
            await Http.PostAsJsonAsync("FutsalGround", futsalGround);
        }

        NavigationManager.NavigateTo("/admin/futsal-grounds");
    }
}
