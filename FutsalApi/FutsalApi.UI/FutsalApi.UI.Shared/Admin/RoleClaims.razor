@page "/admin/roles/{RoleId}/claims"
@using FutsalApi.Data.Models
@using FutsalApi.Data.Models
@using Auth
@inject HttpClient Http

<PageTitle>Role Claims</PageTitle>

<h1>Role Claims</h1>

@if (claims == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Grid TItem="ClaimModel" Items="claims">
        <GridColumn TItem="ClaimModel" HeaderText="Type" PropertyName="Type" />
        <GridColumn TItem="ClaimModel" HeaderText="Value" PropertyName="Value" />
        <GridColumn TItem="ClaimModel" HeaderText="Actions">
            <Button Color="ButtonColor.Danger" @onclick="() => RemoveClaim(context)">Remove</Button>
        </GridColumn>
    </Grid>
}

<EditForm Model="@newClaim" OnValidSubmit="AddClaim">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="type">Type</label>
        <InputSelect id="type" @bind-Value="newClaim.Type" class="form-control">
            @foreach (var type in Enum.GetValues<ClaimType>())
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="permission">Permission</label>
        <InputSelect id="permission" @bind-Value="newClaim.Permission" class="form-control">
            @foreach (var permission in Enum.GetValues<Permissions>())
            {
                <option value="@permission">@permission</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="resource">Resource</label>
        <InputSelect id="resource" @bind-Value="newClaim.Resource" class="form-control">
            @foreach (var resource in Enum.GetValues<Resources>())
            {
                <option value="@resource">@resource</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Add Claim</button>
</EditForm>

@code {
    [Parameter]
    public string RoleId { get; set; }

    private List<ClaimModel>? claims;
    private ClaimModel newClaim = new();

    protected override async Task OnInitializedAsync()
    {
        claims = await Http.GetFromJsonAsync<List<ClaimModel>>($"Roles/{RoleId}/Claims");
    }

    private async Task AddClaim()
    {
        await Http.PostAsJsonAsync($"Roles/{RoleId}/Claims", newClaim);
        claims = await Http.GetFromJsonAsync<List<ClaimModel>>($"Roles/{RoleId}/Claims");
        newClaim = new();
    }

    private async Task RemoveClaim(ClaimModel claim)
    {
        await Http.DeleteAsync($"Roles/{RoleId}/Claims?type={claim.Type}&value={claim.Value}");
        claims = await Http.GetFromJsonAsync<List<ClaimModel>>($"Roles/{RoleId}/Claims");
    }
}
