@page "/create-payment"
@using FutsalApi.Data.Models
@using FutsalApi.Data.DTO
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Create Payment</PageTitle>

<h1>Create Payment</h1>

<EditForm Model="@paymentRequest" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="booking-id">Booking ID</label>
        <InputNumber id="booking-id" @bind-Value="paymentRequest.BookingId" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="amount-paid">Amount Paid</label>
        <InputNumber id="amount-paid" @bind-Value="paymentRequest.AmountPaid" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="method">Payment Method</label>
        <InputSelect id="method" @bind-Value="paymentRequest.Method" class="form-control" @onchange="OnPaymentMethodChanged">
            @foreach (var method in Enum.GetValues<PaymentMethod>())
            {
                <option value="@method">@method</option>
            }
        </InputSelect>
    </div>

    @if (paymentRequest.Method == PaymentMethod.ESewa || paymentRequest.Method == PaymentMethod.Khalti)
    {
        <div class="mb-3">
            <label for="success-url">Success URL</label>
            <InputText id="success-url" @bind-Value="successUrl" class="form-control" placeholder="https://yourdomain.com/payment/success" />
        </div>
        
        <div class="mb-3">
            <label for="failure-url">Failure URL (@(paymentRequest.Method == PaymentMethod.ESewa ? "Failure" : "Return") URL)</label>
            <InputText id="failure-url" @bind-Value="failureUrl" class="form-control" placeholder="https://yourdomain.com/payment/failure" />
        </div>

        @if (paymentRequest.Method == PaymentMethod.Khalti)
        {
            <div class="mb-3">
                <label for="website-url">Website URL</label>
                <InputText id="website-url" @bind-Value="websiteUrl" class="form-control" placeholder="https://yourdomain.com" />
            </div>
        }
    }

    <button type="submit" class="btn btn-primary">
        @if (paymentRequest.Method == PaymentMethod.ESewa || paymentRequest.Method == PaymentMethod.Khalti)
        {
            <text>Proceed to @paymentRequest.Method Payment</text>
        }
        else
        {
            <text>Submit Payment</text>
        }
    </button>
</EditForm>

@code {
    private PaymentRequest paymentRequest = new();
    private string successUrl = "";
    private string failureUrl = "";
    private string websiteUrl = "";

    protected override void OnInitialized()
    {
        var baseUrl = NavigationManager.BaseUri;
        successUrl = $"{baseUrl}payment/success";
        failureUrl = $"{baseUrl}payment/failure";
        websiteUrl = baseUrl;
    }

    private void OnPaymentMethodChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<PaymentMethod>(e.Value?.ToString(), out var method))
        {
            paymentRequest.Method = method;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            switch (paymentRequest.Method)
            {
                case PaymentMethod.ESewa:
                    await HandleESewaPayment();
                    break;
                case PaymentMethod.Khalti:
                    await HandleKhaltiPayment();
                    break;
                default:
                    await HandleRegularPayment();
                    break;
            }
        }
        catch (Exception ex)
        {
            // Handle error
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private async Task HandleESewaPayment()
    {
        var esewaRequest = new
        {
            BookingId = paymentRequest.BookingId,
            SuccessUrl = successUrl,
            FailureUrl = failureUrl
        };

        var response = await Http.PostAsJsonAsync("PaymentGateway/esewa/initiate", esewaRequest);
        
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ESewaInitiateResponse>();
            if (result?.Success == true)
            {
                // Redirect to eSewa payment page
                NavigationManager.NavigateTo(result.PaymentUrl, true);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", result?.Message ?? "Failed to initiate eSewa payment");
            }
        }
    }

    private async Task HandleKhaltiPayment()
    {
        var khaltiRequest = new
        {
            BookingId = paymentRequest.BookingId,
            ReturnUrl = failureUrl,
            WebsiteUrl = websiteUrl
        };

        var response = await Http.PostAsJsonAsync("PaymentGateway/khalti/initiate", khaltiRequest);
        
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<KhaltiInitiateResponse>();
            if (result?.Success == true)
            {
                // Redirect to Khalti payment page
                NavigationManager.NavigateTo(result.PaymentUrl, true);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", result?.Message ?? "Failed to initiate Khalti payment");
            }
        }
    }

    private async Task HandleRegularPayment()
    {
        var result = await Http.PostAsJsonAsync("Payment", paymentRequest);
        if (result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/my-payments");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Failed to process payment");
        }
    }

    // Response classes for deserialization
    public class ESewaInitiateResponse
    {
        public string PaymentUrl { get; set; } = string.Empty;
        public string TransactionUuid { get; set; } = string.Empty;
        public bool Success { get; set; }
        public string Message { get; set; } = string.Empty;
    }

    public class KhaltiInitiateResponse
    {
        public string Pidx { get; set; } = string.Empty;
        public string PaymentUrl { get; set; } = string.Empty;
        public DateTime ExpiresAt { get; set; }
        public int ExpiresIn { get; set; }
        public bool Success { get; set; }
        public string Message { get; set; } = string.Empty;
    }
}
