@page "/payment/success"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Payment Success</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body text-center">
                    @if (isProcessing)
                    {
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Processing...</span>
                        </div>
                        <h4 class="mt-3">Processing your payment...</h4>
                        <p>Please wait while we verify your payment.</p>
                    }
                    else if (paymentSuccess)
                    {
                        <i class="fas fa-check-circle text-success" style="font-size: 4rem;"></i>
                        <h2 class="text-success mt-3">Payment Successful!</h2>
                        <p class="text-muted">Your payment has been processed successfully.</p>
                        <button class="btn btn-primary" @onclick="GoToBookings">View My Bookings</button>
                    }
                    else
                    {
                        <i class="fas fa-times-circle text-danger" style="font-size: 4rem;"></i>
                        <h2 class="text-danger mt-3">Payment Failed</h2>
                        <p class="text-muted">@errorMessage</p>
                        <button class="btn btn-secondary" @onclick="GoToPayments">Try Again</button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    public string? Data { get; set; }

    [SupplyParameterFromQuery]
    public string? TransactionCode { get; set; }

    [SupplyParameterFromQuery]
    public string? Status { get; set; }

    [SupplyParameterFromQuery]
    public decimal? TotalAmount { get; set; }

    [SupplyParameterFromQuery]
    public string? TransactionUuid { get; set; }

    [SupplyParameterFromQuery]
    public string? ProductCode { get; set; }

    [SupplyParameterFromQuery]
    public string? Pidx { get; set; }

    private bool isProcessing = true;
    private bool paymentSuccess = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await ProcessPaymentCallback();
    }

    private async Task ProcessPaymentCallback()
    {
        try
        {
            if (!string.IsNullOrEmpty(Pidx))
            {
                // Khalti callback
                await ProcessKhaltiCallback();
            }
            else if (!string.IsNullOrEmpty(TransactionUuid))
            {
                // eSewa callback
                await ProcessESewaCallback();
            }
            else
            {
                errorMessage = "Invalid payment callback data";
                paymentSuccess = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while processing your payment";
            paymentSuccess = false;
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ProcessESewaCallback()
    {
        var callbackData = new ESewaCallbackResponse
        {
            Data = Data ?? "",
            TransactionCode = TransactionCode ?? "",
            Status = Status ?? "",
            TotalAmount = TotalAmount ?? 0,
            TransactionUuid = TransactionUuid ?? "",
            ProductCode = ProductCode ?? "",
            Success = Status == "success"
        };

        var response = await Http.PostAsJsonAsync("PaymentGateway/esewa/callback", callbackData);
        
        if (response.IsSuccessStatusCode)
        {
            paymentSuccess = true;
        }
        else
        {
            errorMessage = "Failed to verify eSewa payment";
            paymentSuccess = false;
        }
    }

    private async Task ProcessKhaltiCallback()
    {
        var response = await Http.PostAsync($"PaymentGateway/khalti/callback?pidx={Pidx}", null);
        
        if (response.IsSuccessStatusCode)
        {
            paymentSuccess = true;
        }
        else
        {
            errorMessage = "Failed to verify Khalti payment";
            paymentSuccess = false;
        }
    }

    private void GoToBookings()
    {
        NavigationManager.NavigateTo("/my-bookings");
    }

    private void GoToPayments()
    {
        NavigationManager.NavigateTo("/create-payment");
    }

    // Response classes for callback processing
    public class ESewaCallbackResponse
    {
        public string Data { get; set; } = string.Empty;
        public string TransactionCode { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public decimal TotalAmount { get; set; }
        public string TransactionUuid { get; set; } = string.Empty;
        public string ProductCode { get; set; } = string.Empty;
        public bool Success { get; set; }
    }
}
