@page "/futsal-search"
@using FutsalApi.UI.Shared.Services
@using FutsalApi.UI.Shared.Models
@inject FutsalService FutsalService

<h1>Futsal Search</h1>

<div class="row mb-3">
    <div class="col-md-6">
        <input type="text" class="form-control" placeholder="Search by name..." @bind="searchName" />
    </div>
    <div class="col-md-3">
        <input type="number" class="form-control" placeholder="Latitude" @bind="latitude" step="0.000001" />
    </div>
    <div class="col-md-3">
        <input type="number" class="form-control" placeholder="Longitude" @bind="longitude" step="0.000001" />
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-3">
        <input type="number" class="form-control" placeholder="Min Rating" @bind="minRating" step="0.1" min="0" max="5" />
    </div>
    <div class="col-md-3">
        <input type="number" class="form-control" placeholder="Max Rating" @bind="maxRating" step="0.1" min="0" max="5" />
    </div>
    <div class="col-md-3">
        <button class="btn btn-primary" type="button" @onclick="Search">Search</button>
    </div>
    <div class="col-md-3">
        <button class="btn btn-secondary" type="button" @onclick="GetCurrentLocation">Use My Location</button>
    </div>
</div>

@if (futsalGrounds != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Coordinates</th>
                <th>Price per Hour</th>
                <th>Rating</th>
                <th>Distance</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ground in futsalGrounds)
            {
                <tr>
                    <td>@ground.Name</td>
                    <td>@ground.Latitude.ToString("F6"), @ground.Longitude.ToString("F6")</td>
                    <td>@ground.PricePerHour.ToString("C")</td>
                    <td>@ground.AverageRating.ToString("F1") (@ground.RatingCount reviews)</td>
                    <td>@(ground.DistanceKm.HasValue ? $"{ground.DistanceKm.Value:F2} km" : "N/A")</td>
                    <td>
                        <a href="/futsal-details/@ground.Id" class="btn btn-info btn-sm">View Details</a>
                        <a href="/book-futsal/@ground.Id" class="btn btn-success btn-sm">Book Now</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string? searchName;
    private double? latitude;
    private double? longitude;
    private double? minRating;
    private double? maxRating;
    private IEnumerable<FutsalGroundResponse>? futsalGrounds;

    private async Task Search()
    {
        var futsalGroundsFromApi = await FutsalService.SearchFutsalGrounds(searchName, latitude, longitude, minRating, maxRating);
        futsalGrounds = futsalGroundsFromApi;
    }

    private async Task GetCurrentLocation()
    {
        // This would require JavaScript interop to get the user's current location
        // For now, we'll just use a placeholder implementation
        // In a real application, you would use IJSRuntime to call navigator.geolocation
        await Task.CompletedTask;
        // Placeholder coordinates (you can implement geolocation later)
        latitude = 27.7172; // Example: Kathmandu
        longitude = 85.3240;
        StateHasChanged();
    }
}
