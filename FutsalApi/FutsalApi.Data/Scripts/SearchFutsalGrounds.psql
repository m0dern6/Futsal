CREATE OR REPLACE FUNCTION search_futsal_grounds(
    p_name TEXT,
    p_latitude NUMERIC,
    p_longitude NUMERIC,
    p_min_rating NUMERIC,
    p_max_rating NUMERIC,
    p_page INT,
    p_page_size INT
)
RETURNS TABLE (
    id INT,
    name TEXT,
    location TEXT,
    owner_id TEXT,
    price_per_hour NUMERIC,
    average_rating NUMERIC,
    rating_count INT,
    latitude NUMERIC,
    longitude NUMERIC,
    description TEXT,
    image_id INT,
    image_url TEXT,
    open_time TIME,
    close_time TIME,
    created_at TIMESTAMP,
    booking_count INT,
    owner_name TEXT,
    distance_km NUMERIC
) AS $$
DECLARE
    default_radius_km NUMERIC := 50; -- Default search radius of 50km if coordinates are provided
BEGIN
    RETURN QUERY
    SELECT
        g."Id",
        g."Name",
        g."Location",
        g."OwnerId",
        g."PricePerHour",
        g."AverageRating",
        g."RatingCount",
        g."Latitude",
        g."Longitude",
        g."Description",
        NULL::INT as image_id, -- Placeholder for image_id
        g."ImageUrl",
        g."OpenTime",
        g."CloseTime",
        g."CreatedAt",
        NULL::INT as booking_count, -- Placeholder for booking_count
        COALESCE(u."UserName", '') as owner_name,
        CASE 
            WHEN p_latitude IS NOT NULL AND p_longitude IS NOT NULL THEN
                (6371 * acos(
                    greatest(-1, least(1,
                        cos(radians(p_latitude)) * 
                        cos(radians(g."Latitude")) * 
                        cos(radians(g."Longitude") - radians(p_longitude)) + 
                        sin(radians(p_latitude)) * 
                        sin(radians(g."Latitude"))
                    ))
                ))
            ELSE NULL
        END AS distance_km
    FROM
        "FutsalGrounds" AS g
    LEFT JOIN "AspNetUsers" AS u ON g."OwnerId" = u."Id"
    WHERE
        g."IsActive" = true AND
        (p_name IS NULL OR g."Name" ILIKE '%' || p_name || '%') AND
        (p_min_rating IS NULL OR g."AverageRating" >= p_min_rating) AND
        (p_max_rating IS NULL OR g."AverageRating" <= p_max_rating) AND
        (
            p_latitude IS NULL OR p_longitude IS NULL OR
            (6371 * acos(
                greatest(-1, least(1,
                    cos(radians(p_latitude)) * 
                    cos(radians(g."Latitude")) * 
                    cos(radians(g."Longitude") - radians(p_longitude)) + 
                    sin(radians(p_latitude)) * 
                    sin(radians(g."Latitude"))
                ))
            )) <= default_radius_km
        )
    ORDER BY
        CASE 
            WHEN p_latitude IS NOT NULL AND p_longitude IS NOT NULL THEN
                (6371 * acos(
                    greatest(-1, least(1,
                        cos(radians(p_latitude)) * 
                        cos(radians(g."Latitude")) * 
                        cos(radians(g."Longitude") - radians(p_longitude)) + 
                        sin(radians(p_latitude)) * 
                        sin(radians(g."Latitude"))
                    ))
                ))
            ELSE 999999
        END ASC,
        g."CreatedAt" DESC
    OFFSET (p_page - 1) * p_page_size
    LIMIT p_page_size;
END;
$$ LANGUAGE plpgsql;
